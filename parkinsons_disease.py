# -*- coding: utf-8 -*-
"""parkinsons disease

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VjTpO5_j-vFPMnzEwpsNKbMdXLcR6Y49
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

#data collection& analysis
parkinsons_data = pd.read_csv('/content/parkinsons.data')

# printing the first 5 rows of the dataframe
parkinsons_data.head()

# number of rows and columns in the dataframe
parkinsons_data.shape

# getting more information about the dataset
parkinsons_data.info()

# checking for missing values in each column
parkinsons_data.isnull().sum()

# getting some statistical measures about the data
parkinsons_data.describe()

#generate labels inside the wedges showing their numeric value
parkinsons_data ['status'].value_counts().plot(kind='pie', autopct = "%1.0f%%")

#boxplot to outliers
import seaborn as sns
import matplotlib.pyplot as plt
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(10, 8))
sns.boxplot(data=parkinsons_data,x = 'MDVP:Fo(Hz)', ax = ax1, color = 'r')
sns.boxplot(data = parkinsons_data, x = 'MDVP:Fhi(Hz)', ax = ax2, color = 'b')
sns.boxplot(data = parkinsons_data, x = 'MDVP:Flo(Hz)', ax = ax3, color = 'g')
sns.boxplot(data = parkinsons_data, x = 'MDVP:Shimmer(dB)', ax = ax4, color = 'm')
plt.show()

df1=parkinsons_data.select_dtypes(include=np.number)
correlation = df1.corr()
print(correlation['status'].sort_values(ascending=False))

import seaborn as sns
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(10, 10))
sns.heatmap(correlation, annot=True, linewidths=1.5, ax=ax)

# distribution of target Variable
parkinsons_data['status'].value_counts()

#Data Pre-Processing

#Separating the features & Target
X = parkinsons_data.drop(columns=['name','status'], axis=1)
Y = parkinsons_data['status']

print(X)

print(Y)

#Splitting the data to training data & Test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#Data Standardization
scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

#Model Training

#Support Vector Machine Model
model = svm.SVC(kernel='rbf', gamma=1, C=10)

# training the SVM model with training data
model.fit(X_train, Y_train)

#Model Evaluation

#Accuracy Score
# accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of training data : ', training_data_accuracy)

# accuracy score on testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data : ', test_data_accuracy)

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")

x =parkinsons_data.drop(columns=['name','status'], axis =1)
y =parkinsons_data["status"]

x_train,x_test,y_train,y_test =  train_test_split(x,y,random_state =42,test_size = 0.2)

#random forest models can help identify the importance of different features in predicting the target variable (parkinson).
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier()
classifier.fit(x_train,y_train)

y_pred = classifier.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)